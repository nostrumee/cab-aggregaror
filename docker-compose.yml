services:
  db:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.4
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.3
    container_name: kafka
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.7.0
    container_name: kafka-exporter
    command: [ "--kafka.server=kafka:29092" ]
    ports:
      - '9308:9308'

  redis:
    image: redis:7.2-rc-alpine
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - '6379:6379'

eureka-server:
  image: eureka-server
  container_name: eureka-server
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
    interval: 10s
    timeout: 5s
    retries: 5
  ports:
    - '8761:8761'

  edge-service:
    image: edge-service
    container_name: edge-service
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_DEFAULTZONE_URL}
      - SPRING_DATA_REDIS_HOST=${REDIS_HOST}
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy

  passenger-service:
    image: passenger-service
    container_name: passenger-service
    ports:
      - '8081:8081'
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_DATASOURCE_URL=${PASSENGER_DB_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_DEFAULTZONE_URL}
    depends_on:
      - kafka
      - db
      - edge-service

  driver-service:
    image: driver-service
    container_name: driver-service
    ports:
      - '8082:8082'
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_DATASOURCE_URL=${DRIVER_DB_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_DEFAULTZONE_URL}
    depends_on:
      - kafka
      - db
      - edge-service

  ride-service:
    image: ride-service
    container_name: ride-service
    ports:
      - '8083:8083'
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_DATASOURCE_URL=${RIDE_DB_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_DEFAULTZONE_URL}
    depends_on:
      - kafka
      - db
      - edge-service

  rating-service:
    image: rating-service
    container_name: rating-service
    ports:
      - '8084:8084'
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SPRING_DATASOURCE_URL=${RATING_DB_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_DEFAULTZONE_URL}
    depends_on:
      - kafka
      - db
      - edge-service

  notification-service:
    image: notification-service
    container_name: notification-service
    ports:
      - '8085:8085'
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_DEFAULTZONE_URL}
    depends_on:
      - kafka
      - edge-service

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - '9300:9300'
      - '9200:9200'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - '5601:5601'

  logstash:
     image: docker.elastic.co/logstash/logstash:7.7.0
     container_name: logstash
     command: logstash -f /etc/logstash/conf.d/logstash.conf
     volumes:
       - ./observability/logstash:/etc/logstash/conf.d
     ports:
       - '5000:5000'

  zipkin:
    image: openzipkin/zipkin:2.27
    container_name: zipkin
    ports:
      - '9411:9411'

volumes:
  postgres:
    driver: local
  esdata1:
    driver: local